package require tcltest
namespace import -force tcltest::*
configure -verbose {body error}
lappend auto_path ..
package require markup
wm withdraw .
#console show
text .t
test rehighlight.1 {exact match highlighting} {
    .t delete 1.0 end
    set pattern "color me red"
    .t insert 1.0 "Hi there $pattern, ok?"
    markup::addRule .t $pattern -tag red
    markup::rehighlight .t 1.0 end
    .t tag ranges red
} {1.9 1.21}
markup::removeRule .t $pattern
test rehighlight.2 {regexp highlighting} {
    .t delete 1.0 end
    set pattern {\d+}
    .t insert 1.0 {Color $123456 the digits}
    markup::addRule .t -regexp $pattern -tag digits
    markup::rehighlight .t 1.0 end
    .t tag ranges digits
} {1.7 1.13}
markup::removeRule .t $pattern
test rehighlight.3 {rule doesn't match anything} {
    .t delete 1.0 end
    set pattern {nope}
    .t insert 1.0 {Nothing here will match}
    markup::addRule .t $pattern -tag nada
    markup::rehighlight .t 1.0 end
    .t tag ranges nada
} {}
markup::removeRule .t $pattern
test rehighlight.4 {no rules to match} {} {}
test rehighlight.5 {single character out of many match} {
    .t delete 1.0 end
    set pattern @
    .t insert 1.0 "Match the $pattern symbol"
    markup::addRule .t $pattern -tag at
    markup::rehighlight .t 1.0 end
    .t tag ranges at
} {1.10 1.11}
markup::removeRule .t $pattern
test rehightlight.6 {regexp vs. exact matching} {
    .t delete 1.0 end
    set pattern {\d+}
    .t insert 1.0 "Don't match the number 12345"
    markup::addRule .t $pattern -tag exact
    markup::rehighlight .t 1.0 end
    .t tag ranges exact
} {}
markup::removeRule .t $pattern
test rehighlight.7 {multiple matches of the same rule} {
    .t delete 1.0 end
    set pattern red
    .t insert 1.0 "red rover, red rover\nsend red Camryn over\nredred"
    markup::addRule .t $pattern -tag red
    markup::rehighlight .t 1.0 end
    .t tag ranges red
} {1.0 1.3 1.11 1.14 2.5 2.8 3.0 3.6}
markup::removeRule .t $pattern
test rehighlight.8 {multiple matches of multiple rules} {
    .t delete 1.0 end
    set pattern1 {\d+}
    set pattern2 red
    .t insert 1.0 "red 1234 green red"
    markup::addRule .t $pattern2 -tag red
    markup::addRule .t -regexp $pattern1 -tag digit
    markup::rehighlight .t 1.0 end
    list [.t tag ranges red] [.t tag ranges digit]
} {{1.0 1.3 1.15 1.18} {1.4 1.8}}
markup::removeRule .t $pattern1
markup::removeRule .t $pattern2
proc applyTags {win startIdx endIdx} {
    set tags {red white}
    foreach tag $tags {
        $win tag add $tag $startIdx $endIdx
    }
    return $tags
}
test rehighlight.9 {apply tags via callback script} {
    .t delete 1.0 end
    set pattern red
    .t insert 1.0 "red red red"
    markup::addRule .t $pattern -callback applyTags
    markup::rehighlight .t 1.0 end
    set result [list [.t tag ranges red] [.t tag ranges white]]
    .t insert 1.1 e
    .t insert 1.6 e
    .t insert 1.11 e
    markup::rehighlight .t 1.0 end
    lappend result [.t tag ranges red] [.t tag ranges white]
} {{1.0 1.3 1.4 1.7 1.8 1.11} {1.0 1.3 1.4 1.7 1.8 1.11} {} {}}
markup::removeRule .t $pattern
rename applyTags ""
.t delete 1.0 end

test autohighlight.1 {add highlight more than once doesn't change anything} {
    set result [wcb::callback .t before insert]
    markup::enableHighlighting .t
    lappend result [wcb::callback .t before insert]
    markup::enableHighlighting .t
    lappend result [wcb::callback .t before insert]
} [list ::markup::markInsertLine ::markup::markInsertLine]

markup::addRule .t green -tag green
markup::enableHighlighting .t
test autohighlight.1 {} {
    .t insert 1.0 "green\ngreen"
    set result [.t tag ranges green]
    .t delete 1.0 end
    list $result [.t tag ranges green]
} {{1.0 1.5 2.0 2.5} {}}

test destroy-window.1 {after the text window is gone, all traces of patterns should be gone} {
    destroy .t
    array names markup::patterns .t*
} {}
cleanupTests
